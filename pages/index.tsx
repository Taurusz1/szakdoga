import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useEffect, useState } from "react";
import { useDisclosure } from "@mantine/hooks";
import getConfig from "next/config";
import sbomQueryResult from "@/models/sbomQueryResult";
import sbom from "@/models/sbom";
import sbomPackage from "@/models/package";
import packageNamesArray from "@/models/package_names";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const { publicRuntimeConfig } = getConfig();
  const [pressed, handlers] = useDisclosure(false);
  const [result, setResult] = useState<sbomQueryResult>();
  const [sbom, setSBOM] = useState<sbom>();
  const [packageNames, setPackageNames] = useState<String[][]>([]);
  const [returnedPackageNames, setReturnedPackageNames] = useState<String[][]>(
    []
  );

  useEffect(() => {}, [sbom]);

  const DownloadKubernetesSBOMFromGithub = async () => {
    const owner = "kubernetes";
    const repo = "Kubernetes";
    const sbom = await DownloadSBOMFromGithub(owner, repo);
    setSBOM(sbom);
  };
  const UploadKubernetesSBOMToMongoDB = async () => {
    const owner = "kubernetes";
    const repo = "Kubernetes";
    await UploadSBOMToMongoDB(sbom!);
  };

  const DownloadSBOMFromGithub = async (owner: String, repo: String) => {
    try {
      const dataObject = {
        owner: owner,
        repo: repo,
      };
      const resSBOM = await fetch(
        publicRuntimeConfig.API_ENDPOINT + "/sbom/github",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(dataObject),
        }
      );
      const dataSBOM = await resSBOM.json();
      return dataSBOM;
      console.log("Download From Github: Success");
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };
  const UploadSBOMToMongoDB = async (sbom: sbom) => {
    const uploadresult = await fetch(
      publicRuntimeConfig.API_ENDPOINT + "/sbom/create",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(sbom),
      }
    );
    console.log("Upload to DB: Success");
  };
  const DownloadSBOMFromMongoDB = async () => {
    const uploadresult = await fetch(
      publicRuntimeConfig.API_ENDPOINT +
        "/sbom/" +
        publicRuntimeConfig.KUBERNETES_SBOM_ID
    );
    const data = await uploadresult.json();
    setSBOM(data);
    console.log("Download From DB: Success");
  };
  const FilterSbom = () => {
    if (!sbom) {
      return;
    }

    const packageNames = sbom.packages?.map((p: sbomPackage) => p.name!).sort();
    const githubLinks = packageNames.filter((str) =>
      str.startsWith("go:github.com")
    );
    const nonGithubLinks = packageNames.filter(
      (str) => !str.startsWith("go:github.com")
    );
    const splitGithubLinks = githubLinks.map((g) => {
      // Splits the string and only keeps the account and repo name
      const [account, repo] = g.split("/").splice(1, 2);
      const uniqueParts = [...new Set([account, repo])];
      return uniqueParts;
    });
    setPackageNames(splitGithubLinks);
    console.log("Filtering: Success");
  };
  const UploadPackageNamesToMongoDB = async () => {
    const uploadresult = await fetch(
      publicRuntimeConfig.API_ENDPOINT + "/package/create",
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(packageNames),
      }
    );
    console.log("Upload to DB: Success");
  };

  const DownloadPackageNamesFromMongoDB = async () => {
    const uploadresult = await fetch(
      publicRuntimeConfig.API_ENDPOINT + "/package/"
    );
    const data = await uploadresult.json();
    setReturnedPackageNames(data);
    console.log("Download From DB: Success");
  };

  const DownLoadlayerOneSBOMS = async () => {
    /*try {
      returnedPackageNames?.map(async (rp) => {
        const sbom = await DownloadSBOMFromGithub(rp[0], rp[1]);
        await UploadSBOMToMongoDB(sbom);
      });
      console.log("Upload To MongoDB: Success");
    } catch (error) {
      console.error("Error fetching data:", error);
    }*/

    try {
      const sbom = await DownloadSBOMFromGithub(
        returnedPackageNames[0][0],
        returnedPackageNames[0][1]
      );
      await UploadSBOMToMongoDB(sbom);
      console.log("Upload To MongoDB: Success");
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div>
          <p>Already Done</p>
          <button onClick={DownloadKubernetesSBOMFromGithub}>
            Download Kubernetes SBOM from Github
          </button>
          <button onClick={UploadKubernetesSBOMToMongoDB}>
            Upload Kubernetes SBOM to MongoDB
          </button>
          <button onClick={DownloadSBOMFromMongoDB}>
            Download Kuberenetes SBOM from MongoDB
          </button>
          <button onClick={FilterSbom}>Sort and Format Package Names</button>
          <button onClick={UploadPackageNamesToMongoDB}>
            Upload Package Names to MongoDB
          </button>
        </div>
        <button onClick={DownloadPackageNamesFromMongoDB}>
          Download Package Names from MongoDB
        </button>
        <button onClick={DownloadPackageNamesFromMongoDB}>
          Download Package Names from MongoDB
        </button>
        <button onClick={DownLoadlayerOneSBOMS}>
          Download Layer One SBOMs From Github
        </button>
      </main>
    </>
  );
}
